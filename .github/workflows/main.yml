name: Text to Video Generator

on:
  workflow_dispatch:
    inputs:
      text_prompt:
        description: 'Text prompt for video generation'
        required: true
        type: string
        default: 'Hello World Video'
      duration:
        description: 'Video duration in seconds'
        required: false
        type: number
        default: 5
      resolution:
        description: 'Video resolution'
        required: false
        type: choice
        options:
        - 640x480
        - 1280x720
        default: '640x480'
      style:
        description: 'Video style'
        required: false
        type: choice
        options:
        - slideshow
        - animated_text
        - ken_burns
        default: 'animated_text'

jobs:
  generate-video:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        sudo apt-get install -y libsm6 libxext6
        sudo apt-get install -y fonts-dejavu-core fonts-liberation
      
    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install opencv-python-headless==4.8.1.78
        pip install Pillow==10.0.1
        pip install numpy==1.24.3
        
    - name: Create simple video generation script
      run: |
        cat > generate_video.py << 'EOF'
        #!/usr/bin/env python3
        import cv2
        import numpy as np
        import os
        from PIL import Image, ImageDraw, ImageFont
        
        print("🚀 Starting video generation...")
        
        # Get parameters from environment or use defaults
        text_prompt = os.getenv('TEXT_PROMPT', 'Hello World')
        duration = int(os.getenv('DURATION', '5'))
        resolution = os.getenv('RESOLUTION', '640x480')
        style = os.getenv('STYLE', 'animated_text')
        
        print(f"📝 Prompt: {text_prompt}")
        print(f"⏱️ Duration: {duration}s")
        print(f"📐 Resolution: {resolution}")
        print(f"🎨 Style: {style}")
        
        # Parse resolution
        try:
            width, height = map(int, resolution.split('x'))
        except:
            width, height = 640, 480
            print("⚠️ Using default resolution 640x480")
        
        fps = 24
        total_frames = duration * fps
        
        # Create output directory
        os.makedirs('output', exist_ok=True)
        
        # Generate frames
        frames = []
        
        for i in range(total_frames):
            # Create a simple gradient background
            progress = i / total_frames
            r = int(100 + 100 * np.sin(progress * 2 * np.pi))
            g = int(100 + 100 * np.sin(progress * 2 * np.pi + 2))
            b = int(100 + 100 * np.sin(progress * 2 * np.pi + 4))
            
            # Create image
            img = Image.new('RGB', (width, height), color=(r, g, b))
            draw = ImageDraw.Draw(img)
            
            # Try to use a font
            try:
                font_size = min(40, width // 20)
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", font_size)
            except:
                # Use default font if custom font fails
                font = ImageFont.load_default()
                font_size = 20
            
            # Calculate text position
            text_bbox = draw.textbbox((0, 0), text_prompt, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            x = (width - text_width) // 2
            y = (height - text_height) // 2
            
            # Add some animation
            y_offset = int(20 * np.sin(i * 0.2))
            
            # Draw text with shadow
            draw.text((x+2, y+y_offset+2), text_prompt, font=font, fill=(0, 0, 0))
            draw.text((x, y+y_offset), text_prompt, font=font, fill=(255, 255, 255))
            
            # Add some decorative elements
            for j in range(3):
                circle_x = int(width * 0.2 * (j+1) + 30 * np.sin(i * 0.1 + j))
                circle_y = int(height * 0.8 + 20 * np.cos(i * 0.1 + j))
                circle_size = 15 + int(10 * np.sin(i * 0.05 + j))
                draw.ellipse([
                    circle_x, circle_y, 
                    circle_x + circle_size, 
                    circle_y + circle_size
                ], fill=(255, 200, 100))
            
            # Convert to OpenCV format
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            frames.append(frame)
            
            if i % 24 == 0:  # Print progress every second
                print(f"📊 Generated {i}/{total_frames} frames ({i/total_frames*100:.1f}%)")
        
        # Save video
        output_path = 'output/generated_video.mp4'
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
        
        for frame in frames:
            out.write(frame)
        
        out.release()
        
        print(f"✅ Video saved successfully: {output_path}")
        print(f"📁 File size: {os.path.getsize(output_path) / (1024*1024):.2f} MB")
        print(f"🎞️ Total frames: {len(frames)}")
        print("🎉 Video generation completed!")
        EOF
        
    - name: Set environment variables
      run: |
        echo "TEXT_PROMPT=${{ github.event.inputs.text_prompt }}" >> $GITHUB_ENV
        echo "DURATION=${{ github.event.inputs.duration }}" >> $GITHUB_ENV
        echo "RESOLUTION=${{ github.event.inputs.resolution }}" >> $GITHUB_ENV
        echo "STYLE=${{ github.event.inputs.style }}" >> $GITHUB_ENV
        
    - name: Debug environment
      run: |
        echo "📋 Environment Variables:"
        echo "TEXT_PROMPT: $TEXT_PROMPT"
        echo "DURATION: $DURATION"
        echo "RESOLUTION: $RESOLUTION"
        echo "STYLE: $STYLE"
        
    - name: Generate video
      id: generate
      run: |
        echo "🎬 Starting video generation process..."
        python generate_video.py
        
    - name: Verify video file
      run: |
        echo "🔍 Checking generated files..."
        ls -la output/ || echo "No output directory"
        
        if [ -f "output/generated_video.mp4" ]; then
          echo "✅ SUCCESS: Video file exists!"
          echo "📊 File size: $(du -h output/generated_video.mp4 | cut -f1)"
          echo "📁 File info: $(file output/generated_video.mp4)"
        else
          echo "❌ FAILED: Video file was not generated"
          echo "📁 Current directory contents:"
          ls -la
          echo "📁 Checking for any generated files:"
          find . -name "*.mp4" -o -name "*.avi" -o -name "*.mov" | head -10
          exit 1
        fi
        
    - name: Create backup of original video
      if: success()
      run: |
        cp output/generated_video.mp4 output/original_video.mp4
        echo "📦 Backup created: output/original_video.mp4"
        
    - name: Optimize video with FFmpeg
      if: success()
      run: |
        echo "⚡ Optimizing video..."
        ffmpeg -i output/generated_video.mp4 \
          -c:v libx264 \
          -crf 23 \
          -preset fast \
          -movflags +faststart \
          -y output/final_video.mp4
        
        echo "✅ Video optimized"
        echo "📊 Original size: $(du -h output/generated_video.mp4 | cut -f1)"
        echo "📊 Optimized size: $(du -h output/final_video.mp4 | cut -f1)"
        
    - name: Create thumbnail
      if: success()
      run: |
        echo "🖼️ Creating thumbnail..."
        ffmpeg -i output/final_video.mp4 \
          -ss 00:00:01 \
          -vframes 1 \
          -q:v 2 \
          -y output/thumbnail.jpg
        
        echo "✅ Thumbnail created"
        
    - name: Generate report
      if: success()
      run: |
        echo "# 🎥 Video Generation Report" > output/README.md
        echo "" >> output/README.md
        echo "## Generation Details" >> output/README.md
        echo "- **Prompt:** ${{ github.event.inputs.text_prompt }}" >> output/README.md
        echo "- **Duration:** ${{ github.event.inputs.duration }} seconds" >> output/README.md
        echo "- **Resolution:** ${{ github.event.inputs.resolution }}" >> output/README.md
        echo "- **Style:** ${{ github.event.inputs.style }}" >> output/README.md
        echo "- **Generated:** $(date)" >> output/README.md
        echo "" >> output/README.md
        echo "## Files" >> output/README.md
        echo "1. `final_video.mp4` - Main video (optimized)" >> output/README.md
        echo "2. `thumbnail.jpg` - Video thumbnail" >> output/README.md
        echo "3. `original_video.mp4` - Original video (backup)" >> output/README.md
        echo "" >> output/README.md
        echo "---" >> output/README.md
        echo "*Generated with GitHub Actions*" >> output/README.md
        
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: generated-video-${{ github.run_number }}
        path: |
          output/final_video.mp4
          output/thumbnail.jpg
          output/README.md
          output/original_video.mp4
        retention-days: 30
        
    - name: Success message
      if: success()
      run: |
        echo ""
        echo "🎉 🎉 🎉 VIDEO GENERATION SUCCESSFUL! 🎉 🎉 🎉"
        echo "==========================================="
        echo ""
        echo "📹 Your video has been generated and is ready to download!"
        echo ""
        echo "📋 Generation Details:"
        echo "   📝 Prompt: ${{ github.event.inputs.text_prompt }}"
        echo "   ⏱️  Duration: ${{ github.event.inputs.duration }} seconds"
        echo "   📐 Resolution: ${{ github.event.inputs.resolution }}"
        echo "   🎨 Style: ${{ github.event.inputs.style }}"
        echo ""
        echo "📥 Download:"
        echo "   → Go to the 'Artifacts' section above"
        echo "   → Download 'generated-video-${{ github.run_number }}'"
        echo ""
        echo "🔄 To create another video, simply run this workflow again!"
        
    - name: Debug on failure
      if: failure()
      run: |
        echo "🔧 DEBUG INFORMATION:"
        echo "===================="
        echo "Python version: $(python --version)"
        echo "PIP list:"
        pip list
        echo ""
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Output directory contents:"
        ls -la output/ 2>/dev/null || echo "No output directory"
        echo ""
        echo "FFmpeg version:"
        ffmpeg -version 2>/dev/null || echo "FFmpeg not available"
        echo ""
        echo "OpenCV check:"
        python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')" 2>/dev/null || echo "OpenCV import failed"
        echo ""
        echo "PIL check:"
        python -c "from PIL import Image; print('PIL imported successfully')" 2>/dev/null || echo "PIL import failed"
