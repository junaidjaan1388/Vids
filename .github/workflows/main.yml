name: Text to Video Generator

on:
  workflow_dispatch:
    inputs:
      text_prompt:
        description: 'Text prompt for video generation'
        required: true
        type: string
        default: 'A beautiful sunset over mountains with flying birds'
      duration:
        description: 'Video duration in seconds'
        required: false
        type: number
        default: 10
      resolution:
        description: 'Video resolution'
        required: false
        type: choice
        options:
        - 480x360
        - 640x480
        - 1280x720
        - 1920x1080
        default: '1280x720'
      style:
        description: 'Video style'
        required: false
        type: choice
        options:
        - slideshow
        - animated_text
        - ken_burns
        default: 'animated_text'

jobs:
  generate-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        sudo apt-get install -y libsm6 libxext6 libgl1-mesa-glx
        sudo apt-get install -y python3-tk
      
    - name: Install Python packages with compatible versions
      run: |
        python -m pip install --upgrade pip
        pip install opencv-python==4.8.1.78
        pip install Pillow==10.0.1
        pip install numpy==1.24.3
        pip install requests==2.31.0
        # Install moviepy without unnecessary dependencies
        pip install moviepy==1.0.3 --no-deps
        pip install decorator==5.1.1
        pip install tqdm==4.66.1
        pip install imageio==2.31.1
        pip install imageio-ffmpeg==0.4.9
        pip install proglog==0.1.10
        
    - name: Create video generation script
      run: |
        cat > generate_video.py << 'EOF'
        #!/usr/bin/env python3
        import argparse
        import os
        import cv2
        import numpy as np
        from PIL import Image, ImageDraw, ImageFont
        import textwrap
        import random
        import subprocess
        
        class VideoGenerator:
            def __init__(self, width=1280, height=720):
                self.width = width
                self.height = height
                self.fps = 24
                
            def create_animated_text_video(self, text_prompt, duration=10):
                """Create animated text video with effects"""
                total_frames = int(duration * self.fps)
                frames = []
                
                # Split text into lines for better display
                words = text_prompt.split()
                lines = []
                current_line = ""
                
                for word in words:
                    if len(current_line + " " + word) <= 30:
                        current_line += " " + word
                    else:
                        lines.append(current_line.strip())
                        current_line = word
                if current_line:
                    lines.append(current_line.strip())
                
                for i in range(total_frames):
                    # Create gradient background that changes over time
                    progress = i / total_frames
                    r = int(50 + 50 * np.sin(progress * 2 * np.pi))
                    g = int(100 + 50 * np.sin(progress * 2 * np.pi + 2))
                    b = int(150 + 50 * np.sin(progress * 2 * np.pi + 4))
                    
                    img = Image.new('RGB', (self.width, self.height), color=(r, g, b))
                    draw = ImageDraw.Draw(img)
                    
                    # Add some visual elements
                    self._add_visual_elements(draw, i)
                    
                    # Try to load font (using default font)
                    try:
                        font_size = 40
                        # Try different font paths
                        font_paths = [
                            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                            "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf",
                            "/usr/share/fonts/truetype/freefont/FreeSansBold.ttf"
                        ]
                        font = None
                        for font_path in font_paths:
                            if os.path.exists(font_path):
                                font = ImageFont.truetype(font_path, font_size)
                                break
                        if font is None:
                            font = ImageFont.load_default()
                    except:
                        font = ImageFont.load_default()
                    
                    # Calculate text position with animation
                    y_offset = int(50 * np.sin(i * 0.1))
                    
                    # Draw each line of text
                    for j, line in enumerate(lines):
                        try:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            text_width = bbox[2] - bbox[0]
                        except:
                            # Fallback if textbbox fails
                            text_width = len(line) * 20
                        
                        x = (self.width - text_width) // 2
                        y = (self.height - len(lines) * 50) // 2 + j * 50 + y_offset
                        
                        # Text shadow
                        shadow_color = (0, 0, 0)
                        draw.text((x+3, y+3), line, font=font, fill=shadow_color)
                        # Main text with color gradient
                        text_color = (255, 255 - j*30, 100 + j*20)
                        draw.text((x, y), line, font=font, fill=text_color)
                    
                    # Convert to OpenCV format
                    frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
                    frames.append(frame)
                
                return frames
            
            def create_slideshow_video(self, text_prompt, duration=10):
                """Create slideshow-style video"""
                total_frames = int(duration * self.fps)
                frames = []
                words = text_prompt.split()
                
                if not words:
                    words = ["Text", "To", "Video"]
                
                # Create slides with different backgrounds
                slides_needed = min(5, len(words))
                slide_duration = total_frames // slides_needed if slides_needed > 0 else total_frames
                
                for i in range(total_frames):
                    slide_num = i // slide_duration if slide_duration > 0 else 0
                    if slide_num >= len(words):
                        slide_num = len(words) - 1
                    
                    # Different background for each slide
                    colors = [
                        (70, 130, 180),   # Steel Blue
                        (220, 20, 60),    # Crimson
                        (34, 139, 34),    # Forest Green
                        (255, 140, 0),    # Dark Orange
                        (148, 0, 211)     # Dark Violet
                    ]
                    
                    bg_color = colors[slide_num % len(colors)]
                    img = Image.new('RGB', (self.width, self.height), color=bg_color)
                    draw = ImageDraw.Draw(img)
                    
                    # Add decorative elements
                    self._add_slide_elements(draw, i, slide_num)
                    
                    try:
                        font_size = 60
                        font_paths = [
                            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                            "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf"
                        ]
                        font = None
                        for font_path in font_paths:
                            if os.path.exists(font_path):
                                font = ImageFont.truetype(font_path, font_size)
                                break
                        if font is None:
                            font = ImageFont.load_default()
                    except:
                        font = ImageFont.load_default()
                    
                    word = words[slide_num] if slide_num < len(words) else words[-1]
                    
                    try:
                        bbox = draw.textbbox((0, 0), word, font=font)
                        text_width = bbox[2] - bbox[0]
                    except:
                        text_width = len(word) * 30
                    
                    x = (self.width - text_width) // 2
                    y = self.height // 2 - 30
                    
                    draw.text((x, y), word, font=font, fill=(255, 255, 255))
                    
                    frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
                    frames.append(frame)
                
                return frames
            
            def create_ken_burns_video(self, text_prompt, duration=10):
                """Create Ken Burns effect video with text overlay"""
                total_frames = int(duration * self.fps)
                frames = []
                
                # Generate background images
                background_images = self._generate_background_images()
                
                for i in range(total_frames):
                    # Select background image with Ken Burns effect
                    bg_idx = (i // (total_frames // len(background_images))) % len(background_images)
                    bg_img = background_images[bg_idx]
                    
                    # Apply zoom and pan (Ken Burns effect)
                    zoom = 1.0 + 0.2 * (i / total_frames)
                    offset_x = int((bg_img.width - self.width) * (i / total_frames))
                    offset_y = int((bg_img.height - self.height) * 0.3 * np.sin(i * 0.05))
                    
                    # Crop and resize
                    left = offset_x
                    upper = offset_y
                    right = min(left + int(self.width / zoom), bg_img.width)
                    lower = min(upper + int(self.height / zoom), bg_img.height)
                    
                    cropped = bg_img.crop((left, upper, right, lower))
                    resized = cropped.resize((self.width, self.height), Image.LANCZOS)
                    
                    draw = ImageDraw.Draw(resized)
                    
                    # Add semi-transparent overlay for better text visibility
                    overlay = Image.new('RGBA', (self.width, self.height), (0, 0, 0, 128))
                    resized_rgba = resized.convert('RGBA')
                    combined = Image.alpha_composite(resized_rgba, overlay)
                    final_img = combined.convert('RGB')
                    draw = ImageDraw.Draw(final_img)
                    
                    try:
                        font_size = 48
                        font_paths = [
                            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                            "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf"
                        ]
                        font = None
                        for font_path in font_paths:
                            if os.path.exists(font_path):
                                font = ImageFont.truetype(font_path, font_size)
                                break
                        if font is None:
                            font = ImageFont.load_default()
                    except:
                        font = ImageFont.load_default()
                    
                    # Wrap text
                    wrapped_text = textwrap.fill(text_prompt, width=30)
                    lines = wrapped_text.split('\n')
                    
                    # Draw text
                    for j, line in enumerate(lines):
                        try:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            text_width = bbox[2] - bbox[0]
                        except:
                            text_width = len(line) * 25
                        
                        x = (self.width - text_width) // 2
                        y = (self.height - len(lines) * 60) // 2 + j * 60
                        
                        # Text shadow
                        draw.text((x+2, y+2), line, font=font, fill=(0, 0, 0))
                        # Main text
                        draw.text((x, y), line, font=font, fill=(255, 255, 255))
                    
                    frame = cv2.cvtColor(np.array(final_img), cv2.COLOR_RGB2BGR)
                    frames.append(frame)
                
                return frames
            
            def _add_visual_elements(self, draw, frame_num):
                """Add visual elements to the frame"""
                # Add floating shapes
                for i in range(5):
                    x = int(self.width * 0.2 * i + 50 * np.sin(frame_num * 0.1 + i))
                    y = int(self.height * 0.8 + 30 * np.cos(frame_num * 0.05 + i))
                    size = 20 + int(10 * np.sin(frame_num * 0.1 + i))
                    
                    color = (
                        int(255 * abs(np.sin(frame_num * 0.02 + i))),
                        int(255 * abs(np.sin(frame_num * 0.02 + i + 2))),
                        int(255 * abs(np.sin(frame_num * 0.02 + i + 4)))
                    )
                    
                    draw.ellipse([x, y, x+size, y+size], fill=color)
            
            def _add_slide_elements(self, draw, frame_num, slide_num):
                """Add decorative elements to slides"""
                # Add border
                border_width = 10
                draw.rectangle(
                    [border_width, border_width, self.width-border_width, self.height-border_width],
                    outline=(255, 255, 255),
                    width=5
                )
                
                # Add animated elements
                for i in range(3):
                    angle = frame_num * 0.1 + i
                    x = int(self.width * 0.1 + 50 * np.sin(angle))
                    y = int(self.height * 0.1 + 50 * np.cos(angle))
                    size = 30
                    
                    draw.rectangle([x, y, x+size, y+size], fill=(255, 255, 255))
            
            def _generate_background_images(self):
                """Generate background images"""
                images = []
                
                # Create gradient backgrounds
                colors = [
                    (65, 105, 225),  # Royal Blue
                    (220, 20, 60),   # Crimson
                    (50, 205, 50),   # Lime Green
                    (255, 165, 0),   # Orange
                    (138, 43, 226)   # Blue Violet
                ]
                
                for color in colors:
                    # Create larger image for Ken Burns effect
                    img = Image.new('RGB', (self.width * 2, self.height * 2), color=color)
                    
                    # Add some texture
